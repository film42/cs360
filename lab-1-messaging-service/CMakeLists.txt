#
# PROJECT, LIBRARY AND BINARY NAMES
#

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(messaging_service)
SET(SERVER_NAME msgd)
SET(CLIENT_NAME msg)
SET(LIBRARY_NAME message_service)

#
# COMPILER CONFIGURATION
#

# Use C++ 11
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -v")
SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -v")

# To use DEBUG
IF (DEFINED ENV{DEBUG})
  SET(CMAKE_BUILD_TYPE Debug)
ENDIF (DEFINED ENV{DEBUG})

IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  # Mac OS X specific code
  MESSAGE(STATUS "Compliling for Darwin")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
  MESSAGE(STATUS "Compliling for Darwin")
ENDIF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

IF (MSVC)
  # Force to always compile with W4
  IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    STRING(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  ELSE()
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  ENDIF()
ELSEIF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
  # Update if necessary
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic")
ENDIF (MSVC)

IF (DEFINED ENV{GTEST_USE_OWN_TR1_TUPLE})
  ADD_DEFINITIONS( -DGTEST_USE_OWN_TR1_TUPLE=1 )
ENDIF (DEFINED ENV{GTEST_USE_OWN_TR1_TUPLE})

ADD_DEFINITIONS( -DGTEST_LANG_CXX11=1 )

MESSAGE(STATUS ${CMAKE_CXX_FLAGS})

#
# INCLUDE DIRECTORIES
#

INCLUDE_DIRECTORIES(src)

#
# SOURCE CODE AND TEST SOURCE CODE
#

FILE(
  GLOB_RECURSE
  SRC_FILES
  src/*
  )

#
# OTHER DEPENDENCIES
#

IF (UNIX)
  FIND_LIBRARY(
    DL
    NAMES
    dl
    )
ENDIF (UNIX)

FIND_LIBRARY(
  PTHREAD
  NAMES
  pthread
  )

IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  FIND_LIBRARY(
    LIBC++
    NAMES
    stdc++
    )
ENDIF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

#
# CREATE LIBRARY
#

LIST(REMOVE_ITEM SRC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/msg_main.cpp")
LIST(REMOVE_ITEM SRC_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/msgd_main.cpp")

ADD_LIBRARY(
  ${LIBRARY_NAME}
  ${SRC_FILES}
  )

#
# SERVER EXECUTABLE
#

ADD_EXECUTABLE(
  ${SERVER_NAME}
  src/msgd_main.cpp
  )

TARGET_LINK_LIBRARIES(
  ${SERVER_NAME}
  ${LIBRARY_NAME}
  ${DL}
  ${LIBC++}
  ${PTHREAD}
  )

#
# CLIENT EXECUTABLE
#

ADD_EXECUTABLE(
  ${CLIENT_NAME}
  src/msg_main.cpp
  )

TARGET_LINK_LIBRARIES(
  ${CLIENT_NAME}
  ${LIBRARY_NAME}
  ${DL}
  ${LIBC++}
  ${PTHREAD}
  )